package ask

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/byuoitav/av-api/base"
	"github.com/byuoitav/common/events"
	"github.com/byuoitav/common/log"
)

var (
	hostname = os.Getenv("PI_HOSTNAME")

	building string
	room     string
)

func init() {
	if len(hostname) == 0 {
		log.L.Fatalf("PI_HOSTNAME is not set.")
	}

	split := strings.Split(hostname, "-")
	if len(split) != 3 {
		log.L.Fatalf("invalid PI_HOSTNAME %v.", hostname)
	}

	building = split[0]
	room = fmt.Sprintf("%v-%v", split[0], split[1])
}

// MonitoringJob is a jobe that gets the status of all the devices in the room, and pushes events from the status.
type MonitoringJob struct {
}

// Run runs the job.
func (m *MonitoringJob) Run(ctx interface{}, eventWrite chan events.Event) {
	// get room status
	log.L.Infof("Getting room status")
	resp, err := http.Get(fmt.Sprintf("http://%v/buildings/%v/rooms/%v", hostname, building, room))
	if err != nil {
		log.L.Warnf("failed to get rooms status: %v", err)
		return
	}
	defer resp.Body.Close()

	// read the body
	b, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.L.Warnf("failed to read API status response: %v", err)
		return
	}

	if resp.StatusCode/100 != 2 {
		log.L.Warnf("non 200 response recieved after querying API status: %s", b)
		return
	}

	var status base.PublicRoom
	err = json.Unmarshal(b, &status)
	if err != nil {
		log.L.Warnf("failed to unmarshal API status response: %v", err)
		return
	}
	log.L.Infof("Successfully got room status.")

	// take the response and send events
	log.L.Debugf("Sending events for displays...")
	for _, dev := range status.Displays {
		event := events.Event{
			Hostname:         hostname,
			Timestamp:        time.Now().Format(time.RFC3339),
			LocalEnvironment: true,
			Building:         building,
			Room:             room,
			Event: events.EventInfo{
				Type:       events.CORESTATE,
				Requestor:  "",
				EventCause: events.AUTOGENERATED,
			},
		}

		if strings.Contains(dev.Name, "-") {
			// assume name is an ID
			event.Event.DeviceID = dev.Name
			event.Event.Device = strings.Split(dev.Name, "-")[2]
		} else {
			event.Event.Device = dev.Name
			event.Event.DeviceID = fmt.Sprintf("%v-%v-%v", building, room, dev.Name)
		}

		log.L.Debugf("Reporting status of %v", event.Event.DeviceID)
		eventWrite <- event
	}
}
