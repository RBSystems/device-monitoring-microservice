package mics

import (
	"errors"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/byuoitav/av-api/dbo"
	"github.com/byuoitav/av-api/status"
	ei "github.com/byuoitav/event-router-microservice/eventinfrastructure/event"
	sm "github.com/byuoitav/device-monitoring-microservice/statemonitoring"
)

var ticker time.Ticker
const STATUS_OK

func GetMicBatteries(interval time.Duration, shureAddr, format, building, room string) error {

	//start by getting the Shure device from the database
	shure, err := dbo.GetDevicesByBuildingAndRoomAndRole(building, room, "Receiver")
	if err != nil {
		errorMessage := "Could not find Shure device in room " + err.Error()
		log.Printf(errorMessage)
		return errors.New(errorMessage)
	}

	//validate that there is only one shure in a room
	if len(shure) != 1 {
		errorMessage := "Invalid Shure receiver configuration detected"
		log.Printf(errorMessage)
		return errors.New(errorMessage)
	}

	ticker := time.NewTicker(interval)

	go func() {
		for _ = range ticker.C {

			//for each configured port query mic power status (assume each port configuration is a mic)
			for _, port := range shure[0].Ports {

				//query power status
				power, err := QueryMicPower(port.Name, shureAddr)
				if err != nil {
					sm.PublishError("Error querying mic power status: " + err.Error(), ei.AUTOGENERATED)
				}

				if power.Power == "on" {

					response, err := QueryMicBattery(port.Name, shureAddr)
					if err != nil {
						sm.PublishError("Error querying mic battery status: " + err.Error(), ei.AUTOGENERATED)
					}
				
					err = sm.SendEvent(ei.HEALTH, ei.AUTOGENERATED, port.Source, building, room, "mic battery", response.Battery, false)
					if err != nil {
						sm.PublishError("Error publishing event", ei.AUTOGENERATED)
					}
				}

			}
		}
	}()

}

func QueryMicPower(address, channel string) (status.PowerStatus, error) {
	return status.PowerStatus{}, nil 
}

func QueryMicBattery(address, channel, format string) (status.Battery, error) {

	//build address
	address := fmt.Sprintf("http://%s/%s/battery/%s", address, channel, format)

	//send request
	response, err := http.Get(address)
	if err != nil {
		return status.Battery{}, err
	} else if response.StatusCode != STATUS_OK {
		return statusBattery{}, errors.New("Non-200 response from shure audio microservice")
	}

	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		return status.Battery{}, err
	}

	var battery status.Battery
	err = json.Unmarshal(body, &battery)
	if err != nil {
		return status.Battery{}, err
	}

	return battery, nil

}
